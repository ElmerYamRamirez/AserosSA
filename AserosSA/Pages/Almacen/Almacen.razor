@page "/almacen"

@using System.ComponentModel
@using Models
@using AntDesign.TableModels
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Almacenes</h3>
</div>

<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
        <Select DataSource="@_list"
                @bind-Value="@_selectedValue1"
                ValueName="@nameof(Person.Value)"
                LabelName="@nameof(Person.Name)"
                DisabledName="@nameof(Person.IsDisabled)"
                Style="width:120px"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar ubicación" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a title="Agregar nuevo almacen" @onclick="AltaAlmacen"><i style="margin-right:5px;" >Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>


<Table @ref="table"
       TItem="AlmacenModel"
       DataSource="@almacenes"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id)" />
    <Column Title="Clave" @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Nombre" Sortable />
    <Column @bind-Field="@context.Descripcion" Sortable />
    <Column @bind-Field="@context.Status" Sortable />
    <ActionColumn>
        <Space>
            <a title="Editar" @onclick="()=>Edit(context.Id)">
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="()=>Delete(context)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>


@using System.Text.Json;
@code {

    [Inject]
    public NavigationManager NavManager { get; set; }

    List<AlmacenModel> almacenes = null;
    List<AlmacenModel> busquedaAlmacen = null;

    IEnumerable<AlmacenModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 4;
    int _total = 0;
    private string txtValue { get; set; }
    List<Person> _list;
    string _selectedValue1;


    protected override async Task OnInitializedAsync()
    {

        almacenes = await localStorage.GetItemAsync<List<AlmacenModel>>("Almacenes");

        if (almacenes == null) {
            almacenes = new List<AlmacenModel> {
                new AlmacenModel{ Id = "ALM-RF-01", Nombre = "RF", Descripcion = "Almacen para el guardado de refacciones", Status = "Activo"},
                new AlmacenModel{ Id = "ALM-PT-01", Nombre = "PT", Descripcion = "Almacen para el guardado de productos terminados", Status = "Activo"},
                new AlmacenModel{ Id = "ALM-PV-01", Nombre = "PV", Descripcion = "Almacen para el guardado de Productos Varios", Status = "Activo"}
            };
        }

        _total = almacenes.Count;

        _list = new List<Person> {
            new Person {Value = "Clave", Name = "Clave"},
            new Person {Value = "Nombre", Name = "Nombre"},
            new Person {Value = "Descripcion", Name = "Descripción"},
            new Person {Value = "Status", Name = "Status"}
        };
    }

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private void OnSelectedItemChangedHandler(Person value)
    {
        Console.WriteLine($"selected: ${value?.Name}");
    }


    public async Task OnChange(QueryModel<AlmacenModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public void RemoveSelection(string id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private async Task Delete(AlmacenModel item)
    {
        bool borrarAlmacen;
        borrarAlmacen = await JsRuntime.InvokeAsync<bool>("blazorInterop.deleteSwal", item.Nombre);
        if (borrarAlmacen)
        {
            almacenes.Remove(item);
            await localStorage.SetItemAsync<List<AlmacenModel>>("Almacenes", almacenes);
            _total = almacenes.Count;
        }
    }

    private async Task Edit(string id)
    {
        await localStorage.SetItemAsync<List<AlmacenModel>>("Almacenes", almacenes);
        NavManager.NavigateTo($"editarAlmacen/{id}");
    }

    public async Task AltaAlmacen()
    {
        await localStorage.SetItemAsync<List<AlmacenModel>>("Almacenes", almacenes);
        NavManager.NavigateTo("altaalmacen");
    }

    private async Task buscar()
    {
        almacenes = await localStorage.GetItemAsync<List<AlmacenModel>>("Almacenes");

        if (txtValue != null)
        {
            switch (_selectedValue1)
            {
                case "Nombre":
                    almacenes = almacenes.FindAll(x => x.Nombre.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Descripcion":
                    almacenes = almacenes.FindAll(x => x.Descripcion.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Clave":
                    almacenes = almacenes.FindAll(x => x.Id.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Status":
                    almacenes = almacenes.FindAll(x => x.Status.Contains(txtValue,StringComparison.CurrentCultureIgnoreCase));
                    break;
                default:
                    await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Selecciona un filtro...");
                    break;
            }
        }
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Buscando...{txtValue}");
        //await JsRuntime.InvokeAsync<Object>(identifier: "buscarSwal");
    }

}
