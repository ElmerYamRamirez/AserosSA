@page "/almacen"

@using System.ComponentModel
@using AntDesign.TableModels
@inject IJSRuntime JsRuntime

<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Almacenes</h3>
</div>

<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
        <Select DataSource="@_list"
                @bind-Value="@_selectedValue1"
                ValueName="@nameof(Person.Value)"
                LabelName="@nameof(Person.Name)"
                DisabledName="@nameof(Person.IsDisabled)"
                Style="width:120px"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar ubicación" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a href="/AltaAlmacen" title="Agregar nueva ubicacion"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>


<Table @ref="table"
       TItem="WeatherForecast"
       DataSource="@forecasts"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id.ToString())" />
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Nombre" Sortable />
    <Column @bind-Field="@context.Descripcion" Sortable />
    <ActionColumn>
        <Space>
            <a title="Editar" href="/altaalmacen/1" >
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="()=>Delete(context.Id)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>
<!--
<br />
<h5>selections:</h5>
@if (selectedRows != null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

    @foreach (var selected in selectedRows)
    {
        <Tag @key="selected.Id" Closable OnClose="e=>RemoveSelection(selected.Id)">@selected.Id </Tag>
    }
}

<Button OnClick="()=> { _pageIndex--; }">Previous page</Button>
<Button OnClick="()=> { _pageIndex++; }">Next Page</Button>
-->

@using System.Text.Json;
@code {

    [Inject]
    public NavigationManager NavManager { get; set; }

    WeatherForecast[] forecasts;

    IEnumerable<WeatherForecast> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 4;
    int _total = 0;
    private string txtValue { get; set; }

    List<Person> _list;
    string _selectedValue1;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await GetForecastAsync(_pageIndex, _pageSize);
        _total = 15;

        _list = new List<Person>
    {
            new Person {Value = "Nombre", Name = "Nombre"},
            new Person {Value = "Descripción", Name = "Descripción"}
        };
    }

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private void OnSelectedItemChangedHandler(Person value)
    {
        Console.WriteLine($"selected: ${value?.Name}");
    }

    public class WeatherForecast
    {
        public int Id { get; set; }

        public string Nombre { get; set; }

        public string Descripcion { get; set; }

        [DisplayName("Date")]
        public DateTime? Date { get; set; }

        [DisplayName("Temp. (C)")]
        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public bool Hot { get; set; }
    }

    private static readonly string[] Descripcion = new[]
    {
        "Materia Prima", "Refacciones", "Productos Varios", "Productos Terminados"
    };

    private static readonly string[] Names = new[]
    {
        "MP", "Refac", "PV", "PT"
    };

    public async Task OnChange(QueryModel<WeatherForecast> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new WeatherForecast
            {
                Id = index,
                Nombre = Names[rng.Next(Names.Length)],
                Descripcion = Descripcion[rng.Next(Descripcion.Length)],
                Date = DateTime.Now.AddDays(index),
                TemperatureC = temperatureC,
                Hot = temperatureC > 30,
            };
        }).ToArray());
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private async Task Delete(int id)
    {
        //await JsRuntime.InvokeAsync<object>(identifier: "deleteSwal");
        await JsRuntime.InvokeVoidAsync("blazorInterop.deleteSwal");
        //forecasts = forecasts.Where(x => x.Id != id).ToArray();
        //_total = forecasts.Length;
    }

    private void Edit(int id)
    {
        NavManager.NavigateTo($"altaalmacen/{id}");
        //forecasts = forecasts.Where(x => x.Id != id).ToArray();
        //_total = forecasts.Length;
    }

    public void AltaAlmacen()
    {
        NavManager.NavigateTo("altaalmacen");
    }

    private async Task buscar()
    {
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Bucando...{txtValue}");
        //await JsRuntime.InvokeAsync<Object>(identifier: "buscarSwal");
    }
}
