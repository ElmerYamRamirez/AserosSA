@page "/almacen"

@using System.ComponentModel
@using Models
@using AntDesign.TableModels
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Almacenes</h3>
</div>

<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
        <Select DataSource="@_list"
                @bind-Value="@_selectedValue1"
                ValueName="@nameof(Person.Value)"
                LabelName="@nameof(Person.Name)"
                DisabledName="@nameof(Person.IsDisabled)"
                Style="width:120px"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar ubicación" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a href="/AltaAlmacen" title="Agregar nuevo almacen"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>


<Table @ref="table"
       TItem="AlmacenModel"
       DataSource="@almacenes"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id.ToString())" />
    <Column Title="Clave" @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Nombre" Sortable />
    <Column @bind-Field="@context.Descripcion" Sortable />
    <ActionColumn>
        <Space>
            <a title="Editar" href="/altaalmacen/1">
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="()=>Delete(context)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>


@using System.Text.Json;
@code {

    [Inject]
    public NavigationManager NavManager { get; set; }

    List<AlmacenModel> almacenes;

    IEnumerable<AlmacenModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 4;
    int _total = 0;
    private string txtValue { get; set; }

    List<Person> _list;
    string _selectedValue1;


    protected override void OnInitialized()
    {
        almacenes = new List<AlmacenModel> {
            new AlmacenModel{ Id = 1, Nombre = "MP", Descripcion = "Materia Prima"},
            new AlmacenModel{ Id = 2, Nombre = "REFAC", Descripcion = "Refacciones"},
            new AlmacenModel{ Id = 3, Nombre = "PV", Descripcion = "Productos Varios"}
        };

        _total = almacenes.Count;

        _list = new List<Person> {
            new Person {Value = "Nombre", Name = "Nombre"},
            new Person {Value = "Descripción", Name = "Descripción"}
        };

    }

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private void OnSelectedItemChangedHandler(Person value)
    {
        Console.WriteLine($"selected: ${value?.Name}");
    }


    public async Task OnChange(QueryModel<AlmacenModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private async Task Delete(AlmacenModel item)
    {
        bool borrarAlmacen;
        borrarAlmacen = await JsRuntime.InvokeAsync<bool>("blazorInterop.deleteSwal", item.Nombre);
        if (borrarAlmacen)
        {
            almacenes.Remove(item);
            _total = almacenes.Count;
        }
    }

    private void Edit(int id)
    {
        NavManager.NavigateTo($"altaalmacen/{id}");
    }

    public void AltaAlmacen()
    {
        NavManager.NavigateTo("altaalmacen");
    }

    private async Task buscar()
    {
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Bucando...{txtValue}");
        //await JsRuntime.InvokeAsync<Object>(identifier: "buscarSwal");
    }

}
