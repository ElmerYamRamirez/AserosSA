@page "/altaalmacen"
@page "/editarAlmacen/{id}"
@using System.Text.Json;
@using Models;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

    <div class="rounded w-75 bg-light mx-auto" style="margin:15px; padding: 15px;">

        @if (id != null)
        {
            <h3>Editar Almacen</h3>
        }
        else
        {
            <h3>Alta Almacen</h3>
        }

        <Divider />
        <Form @ref="form"
              ValidateOnChange="true"
              Model="@Almacen"
              LabelColSpan="24"
              WrapperColSpan="8"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              Size="ntSizeLDSType.Small">
            <Row Gutter="16">
                <AntDesign.Col Span="12">
                    <FormItem Label="Clave" LabelColSpan="24" WrapperColSpan="24">
                        <Input id="clave" @bind-Value="@context.Id" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <FormItem Label="Nombre" LabelColSpan="24" WrapperColSpan="24">
                        <Input id="nombre" @bind-Value="@context.Nombre" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16">
                <AntDesign.Col Span="24">
                    <FormItem Label="Descripción" LabelColSpan="24" WrapperColSpan="24">
                        <TextArea @bind-Value="@context.Descripcion" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16">
                <AntDesign.Col Span="12">

                </AntDesign.Col>
            </Row>



            <FormItem Label="Status">
                <Select DataSource="@_list"
                        @bind-Value="@context.Status"
                        ValueName="@nameof(Person.Value)"
                        LabelName="@nameof(Person.Name)"
                        Style="width: 120px;"
                        Placeholder="Choose"
                        AllowClear>
                </Select>
            </FormItem>
            <FormItem WrapperColSpan="16">
                <Button OnClick="save">
                    Guardar
                </Button>
                <Button @onclick="cancel" HtmlType="submit" Danger>
                    Cancelar
                </Button>
            </FormItem>
        </Form>
    </div>

    @code
{
        [Parameter]
        public string id { get; set; }
        bool editar = false;

        private AlmacenModel Almacen = new AlmacenModel();
        AntDesign.Form<AlmacenModel> form;

        List<AlmacenModel> almacenes = null;

        List<Person> _list;

        class Person
        {
            public string Value { get; set; }
            public string Name { get; set; }
        }

        protected override async Task OnInitializedAsync()
        {
            _list = new List<Person>
            {
            new Person {Value = "activo", Name = "Activo"},
            new Person {Value = "inactivo", Name = "Inactivo"}
        };

            almacenes = await localStorage.GetItemAsync<List<AlmacenModel>>("Almacenes");

            if (!(id == null))
            {
                Almacen = almacenes.Find(x => x.Id.Equals(id));
                editar = true;
            }
        }

        private void OnFinish(EditContext editContext)
        {
            Console.WriteLine($"Success:{JsonSerializer.Serialize(Almacen)}");
        }

        private void OnFinishFailed(EditContext editContext)
        {
            Console.WriteLine($"Failed:{JsonSerializer.Serialize(Almacen)}");
        }

        private async Task save()
        {
            if (form.Validate())
            {
                if (editar == false)
                {
                    if (almacenes.Exists(x => x.Id == Almacen.Id))
                    {
                        await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal", $"El id {Almacen.Id} ya existe");
                    }
                    else
                    {
                        almacenes.Add(Almacen);
                        await localStorage.SetItemAsync<List<AlmacenModel>>("Almacenes", almacenes);
                        await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                        NavigationManager.NavigateTo("almacen");
                    }
                }
                else
                {
                    await localStorage.SetItemAsync<List<AlmacenModel>>("Almacenes", almacenes);
                    await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                    NavigationManager.NavigateTo("almacen");
                }
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal");
            }
        }

        private async Task cancel()
        {
            await JsRuntime.InvokeAsync<object>("blazorInterop.CancelSwal");
            NavigationManager.NavigateTo("almacen");
        }

    }
