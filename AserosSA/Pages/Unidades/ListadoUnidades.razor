@page "/listadoUnidades"

@using System.ComponentModel
@using Models
@using AntDesign.TableModels
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Text.Json;


<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Unidades</h3>
</div>
<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
        <Select DataSource="@_list"
                @bind-Value="@_selectedValue1"
                ValueName="@nameof(Person.Value)"
                LabelName="@nameof(Person.Name)"
                DisabledName="@nameof(Person.IsDisabled)"
                Style="width:120px"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Unidad" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a title="Nueva unidad" @onclick="AltaUnidad"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>


<Table @ref="table"
       TItem="UnidadModel"
       DataSource="@unidades"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">

    <Selection Key="@(context.Id)" />

    <Column Title="Clave" @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Simbolo" Sortable />
    <Column @bind-Field="@context.Descripcion" Sortable />
    <Column @bind-Field="@context.Estatus" Sortable />

    <ActionColumn>
        <Space>
            <a @onclick="()=>Edit(context.Id)" title="Editar">
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="()=>Delete(context)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>Página: @_pageIndex | Registros: @_pageSize | Total: @_total</p>

@code {

    [Inject]
    public NavigationManager NavManager { get; set; }

    List<UnidadModel> unidades = null;
    List<UnidadModel> busquedaUnidad = null;

    IEnumerable<UnidadModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 5;
    int _total = 0;
    private string txtValue { get; set; }
    List<Person> _list;
    string _selectedValue1;

    protected override async Task OnInitializedAsync()
    {
        unidades = await localStorage.GetItemAsync<List<UnidadModel>>("Unidades");

        if (unidades == null)
        {
            unidades = new List<UnidadModel> {
                new UnidadModel{ Id = "UNI-KG-01", Simbolo = "KG", Descripcion = "Kilogramo", Estatus = "Activo"},
                new UnidadModel{ Id = "UNI-L-01", Simbolo = "L", Descripcion = "Litro", Estatus = "Activo"},
                new UnidadModel{ Id = "UNI-M-01", Simbolo = "M", Descripcion = "Metro", Estatus = "Activo"}
            };
        }

        //unidades = await GetForecastAsync(_pageIndex, _pageSize);
        _total = unidades.Count;

        _list = new List<Person> {
            new Person {Value = "Clave", Name = "Clave"},
            new Person {Value = "Simbolo", Name = "Simbolo"},
            new Person {Value = "Descripcion", Name = "Descripción"},
            new Person {Value = "Estatus", Name = "Estatus"},
        };
    }


    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private void OnSelectedItemChangedHandler(Person value)
    {
        Console.WriteLine($"selected: ${value?.Name}");
    }

    public async Task OnChange(QueryModel<UnidadModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public void RemoveSelection(string id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private async Task Delete(UnidadModel item)
    {
        bool borrarUnidad;
        borrarUnidad = await JsRuntime.InvokeAsync<bool>("blazorInterop.deleteSwal", item.Simbolo);
        if (borrarUnidad)
        {
            unidades.Remove(item);
            _total = unidades.Count;
        }
    }

    private async Task Edit(string id)
    {
        await localStorage.SetItemAsync<List<UnidadModel>>("Unidades", unidades);
        NavManager.NavigateTo($"unidad/{id}");
    }

    public async Task AltaUnidad()
    {
        await localStorage.SetItemAsync<List<UnidadModel>>("Unidades", unidades);
        NavManager.NavigateTo("unidad");
    }

    private async Task buscar()
    {
        unidades = await localStorage.GetItemAsync<List<UnidadModel>>("Unidades");

        if (txtValue != null)
        {
            switch (_selectedValue1)
            {
                case "Clave":
                    unidades = unidades.FindAll(x => x.Id.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Simbolo":
                    unidades = unidades.FindAll(x => x.Simbolo.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Descripcion":
                    unidades = unidades.FindAll(x => x.Descripcion.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Estatus":
                    unidades = unidades.FindAll(x => x.Estatus.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                default:
                    await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Selecciona un filtro");
                    break;
            }
        }
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Bucando...{txtValue}");
        //await JsRuntime.InvokeAsync<Object>(identifier: "buscarSwal");
    }





    /*private static readonly string[] Nombres = new[]
{
        "Kilogramo", "Litro", "Metro", "Tonelada", "Libra", "Yarda", "Pie", "Pulgada", "Vara", "Milla", "Onza"
    };
    private static readonly string[] Simbolos = new[]
    {
        "KG", "L", "M",  "Ton", "Lb", "yard",  "foot", "inch", "rod", "mile", "ounce"
    };

    public Task<Unidades[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, 11).Select(index =>
        {

            return new Unidades
            {
                Id = index,
                Nombre = Nombres[rng.Next(Nombres.Length)],
                Simbolo = Simbolos[rng.Next(Simbolos.Length)]
            };
        }).ToArray());
    }



    public async Task Eliminar()
    {
        await JsRuntime.InvokeAsync<object>(identifier: "deleteSwal");
    }
    private string txtValue { get; set; }
    private async Task buscar()
    {
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Bucando...{txtValue}");
        //await JsRuntime.InvokeAsync<Object>(identifier: "buscarSwal");
    }*/
}

