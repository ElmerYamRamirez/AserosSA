@page "/unidad"
@page "/unidad/{id}"
@using System.Text.Json;
@using Models;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (id != null)
{
    <h3>Editar Unidad</h3>
}
else
{
    <h3>Alta Unidad</h3>
}

<Form @ref="form"
      ValidateOnChange="true"
      Model="@Unidad"
      LabelColSpan="24"
      WrapperColSpan="8"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Size="ntSizeLDSType.Small">

    <FormItem Label="Clave">
        <Input @bind-Value="@context.Id" />
    </FormItem>
    <FormItem Label="Simbolo">
        <TextArea @bind-Value="@context.Simbolo" />
    </FormItem>
    <FormItem Label="Descripción">
        <TextArea @bind-Value="@context.Descripcion" />
    </FormItem>
    <FormItem Label="Estatus">
        <Select DataSource="@_list"
                @bind-Value="@context.Estatus"
                ValueName="@nameof(Person.Value)"
                LabelName="@nameof(Person.Name)"
                Style="width: 120px;"
                Placeholder="Choose"
                AllowClear>
        </Select>
    </FormItem>
    <FormItem WrapperColSpan="16">
        <Button @onclick="save" HtmlType="submit">
            Guardar
        </Button>
        <Button @onclick="cancel" HtmlType="submit" Danger>
            Cancelar
        </Button>
    </FormItem>
</Form>

@code 
{
        [Parameter]
        public string id { get; set; }
        bool editar = false;

    private UnidadModel Unidad = new UnidadModel();
    AntDesign.Form<UnidadModel> form;

    List<UnidadModel> unidades = null;

    List<Person> _list;

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    public String saveValue { get; set; }



    protected override async Task OnInitializedAsync()
    {
        _list = new List<Person>
        {
            new Person {Value = "activo", Name = "Activo"},
            new Person {Value = "inactivo", Name = "Inactivo"}
        };

        unidades = await localStorage.GetItemAsync<List<UnidadModel>>("Unidades");

        if (!(id == null))
        {
            saveValue = "Editar";
            Unidad = unidades.Find(x => x.Id.Equals(id));
            editar = true;
        }
        else
        {
            saveValue = "Guardar";
        }
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(Unidad)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(Unidad)}");
    }

    private async Task save()
    {
        if (form.Validate())
        {
            if (editar == false)
            {
                if (unidades.Exists(x => x.Id == Unidad.Id))
                {
                    await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal", $"El id {Unidad.Id} ya existe");
                }
                else
                {
                    unidades.Add(Unidad);
                    await localStorage.SetItemAsync<List<UnidadModel>>("Unidades", unidades);
                    await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                    NavigationManager.NavigateTo("/listadoUnidades");
                }
            }
            else
            {
                await localStorage.SetItemAsync<List<UnidadModel>>("Unidades", unidades);
                await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                NavigationManager.NavigateTo("/listadoUnidades");
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal");
        }
    }



    public async Task cancel()
    {
        await JsRuntime.InvokeAsync<object>("blazorInterop.CancelSwal");
        NavigationManager.NavigateTo("/listadoUnidades");
    }

}

