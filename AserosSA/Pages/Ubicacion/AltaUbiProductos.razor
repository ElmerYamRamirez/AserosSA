@page "/altaubicacion"
@page "/editarUbicacion/{id}"
@using System.Text.Json;
@using Models;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ModalService _modalService
@inject MessageService _message

@if (id == null)
{
    <h3>Alta Ubicación</h3>
}
else
{
    <h3>Editar Ubicación</h3>
}

<Form @ref="form"
      ValidateOnChange="true"
      Model="@Ubicacion"
      LabelColSpan="24"
      WrapperColSpan="8"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Size="ntSizeLDSType.Small">
    <FormItem Label="Clave">
        <Input id="clave" @bind-Value="@context.Id" />
    </FormItem>
    <FormItem Label="Nombre">
        <Input id="nombre" @bind-Value="@context.Nombre" />
    </FormItem>
    <FormItem Label="Descripción">
        <TextArea @bind-Value="@context.Descripcion" />
    </FormItem>
    <FormItem Label="Status">
        <Select DataSource="@_list"
                @bind-Value="@context.Status"
                ValueName="@nameof(Person.Value)"
                LabelName="@nameof(Person.Name)"
                Style="width: 120px;"
                Placeholder="Choose"
                AllowClear>
        </Select>
    </FormItem>
    <FormItem Label="Dimension">
        <Input id="Dimension" @bind-Value="@context.Dimension" />
    </FormItem>
    <FormItem Label="Pasillo">
        <Input id="Pasillo" @bind-Value="@context.Pasillo" />
    </FormItem>
    <FormItem Label="Estante">
        <Input id="Estante" @bind-Value="@context.Estante" />
    </FormItem>
    <FormItem Label="Nivel">
        <Input id="Nivel" @bind-Value="@context.Nivel" />
    </FormItem>
    <FormItem WrapperColSpan="16">
        <Button OnClick="save">
            Guardar
        </Button>
        <Button @onclick="cancel" HtmlType="submit" Danger>
            Cancelar
        </Button>
    </FormItem>
</Form>

@code
{
    [Parameter]
    public string id { get; set; }
    bool editar = false;

    private UbicacionModel Ubicacion = new UbicacionModel();
    AntDesign.Form<UbicacionModel> form;

    List<UbicacionModel> ubicaciones = null;

    List<Person> _list;

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _list = new List<Person>
    {
            new Person {Value = "Activo", Name = "Activo"},
            new Person {Value = "Inactivo", Name = "Inactivo"}
        };

        ubicaciones = await localStorage.GetItemAsync<List<UbicacionModel>>("Ubicaciones");

        if (!(id == null))
        {
            Ubicacion = ubicaciones.Find(x => x.Id.Equals(id));
            editar = true;
        }
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(Ubicacion)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(Ubicacion)}");
    }

    private async Task save()
    {
        if (form.Validate())
        {
            if (editar == false)
            {
                if (ubicaciones.Exists(x => x.Id == Ubicacion.Id))
                {
                    await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal", $"El id {Ubicacion.Id} ya existe");
                }
                else
                {
                    ubicaciones.Add(Ubicacion);
                    await localStorage.SetItemAsync<List<UbicacionModel>>("Ubicaciones", ubicaciones);
                    await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                    NavigationManager.NavigateTo("ubicacionProductos");
                }
            }
            else
            {
                await localStorage.SetItemAsync<List<UbicacionModel>>("Ubicaciones", ubicaciones);
                await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                NavigationManager.NavigateTo("ubicacionProductos");
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal");
        }
    }

    private async Task cancel()
    {
        await JsRuntime.InvokeAsync<object>("blazorInterop.CancelSwal");
        NavigationManager.NavigateTo("ubicacionProductos");
    }

}
