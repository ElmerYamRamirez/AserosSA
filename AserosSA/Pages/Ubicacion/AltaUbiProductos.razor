@page "/altaubicacion"
@page "/editarUbicacion/{id}"
@using System.Text.Json;
@using Models;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ModalService _modalService
@inject MessageService _message

<div class="rounded w-75 bg-light mx-auto" style="margin:15px; padding: 15px;">
        @if (id == null)
        {
            <h3 class="text-center">Alta Ubicación</h3>
        }
        else
        {
            <h3 class="text-center">Editar Ubicación</h3>
        }
    <Divider />
    <Form @ref="form"
          ValidateOnChange="true"
          Model="@Ubicacion"
          LabelColSpan="24"
          WrapperColSpan="8"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          Size="ntSizeLDSType.Small">
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="Clave" LabelColSpan="24" WrapperColSpan="24">
                    <Input id="clave" @bind-Value="@context.Id" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Nombre" LabelColSpan="24" WrapperColSpan="24">
                    <Input id="nombre" @bind-Value="@context.Nombre" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <FormItem Label="Descripción" LabelColSpan="24" WrapperColSpan="24">
                    <TextArea @bind-Value="@context.Descripcion" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <FormItem Label="Status">
                    <Select DataSource="@_list"
                            @bind-Value="@context.Status"
                            ValueName="@nameof(Person.Value)"
                            LabelName="@nameof(Person.Name)"
                            Style="width: 120px;"
                            Placeholder="Choose"
                            AllowClear>
                    </Select>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="6">
                <FormItem Label="Dimension">
                    <Select DataSource="@_dimenciones"
                            @bind-Value="@context.Dimension"
                            ValueName="@nameof(Person.Value)"
                            LabelName="@nameof(Person.Name)"
                            OnSelectedItemChanged="OnSelectedItemChangedHandler"
                            Style="width:120px">
                    </Select>
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="6">
                <FormItem Label="Pasillo">
                    <AntDesign.InputNumber id="Pasillo" @bind-Value="@context.Pasillo" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="6">
                <FormItem Label="Estante">
                    <AntDesign.InputNumber id="Estante" @bind-Value="@context.Estante" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="6">
                <FormItem Label="Nivel">
                    <AntDesign.InputNumber id="Nivel" @bind-Value="@context.Nivel" Disabled="@disabled" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <FormItem WrapperColSpan="16">
            <Button OnClick="save">
                Guardar
            </Button>
            <Button @onclick="cancel" HtmlType="submit" Danger>
                Cancelar
            </Button>
        </FormItem>
    </Form>
</div>

    @code
{
        [Parameter]
        public string id { get; set; }
        bool editar = false;

        private UbicacionModel Ubicacion = new UbicacionModel();
        AntDesign.Form<UbicacionModel> form;

        List<UbicacionModel> ubicaciones = null;

        List<Person> _list;

        private bool disabled = true;

        List<Person> _dimenciones = new List<Person> {
        new Person { Name = "2D", Value = "2D"},
        new Person { Name = "3D", Value = "3D"}
    };

        class Person
        {
            public string Value { get; set; }
            public string Name { get; set; }
        }

        protected override async Task OnInitializedAsync()
        {
            _list = new List<Person>
    {
            new Person {Value = "Activo", Name = "Activo"},
            new Person {Value = "Inactivo", Name = "Inactivo"}
        };

            ubicaciones = await localStorage.GetItemAsync<List<UbicacionModel>>("Ubicaciones");

            if (!(id == null))
            {
                Ubicacion = ubicaciones.Find(x => x.Id.Equals(id));
                editar = true;
            }
        }

        private void OnSelectedItemChangedHandler(Person value)
        {
            Console.WriteLine($"selected: ${value?.Name}");
            if (value.Name == "2D")
            {
                disabled = true;
                Ubicacion.Nivel = 0;
            }
            else if (value.Name == "3D")
            {
                disabled = false;
            }
        }

        private void OnFinish(EditContext editContext)
        {
            Console.WriteLine($"Success:{JsonSerializer.Serialize(Ubicacion)}");
        }

        private void OnFinishFailed(EditContext editContext)
        {
            Console.WriteLine($"Failed:{JsonSerializer.Serialize(Ubicacion)}");
        }

        private async Task save()
        {
            if (form.Validate())
            {
                if (editar == false)
                {
                    if (ubicaciones.Exists(x => x.Id == Ubicacion.Id))
                    {
                        await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal", $"El id {Ubicacion.Id} ya existe");
                    }
                    else
                    {
                        ubicaciones.Add(Ubicacion);
                        await localStorage.SetItemAsync<List<UbicacionModel>>("Ubicaciones", ubicaciones);
                        await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                        NavigationManager.NavigateTo("ubicacionProductos");
                    }
                }
                else
                {
                    await localStorage.SetItemAsync<List<UbicacionModel>>("Ubicaciones", ubicaciones);
                    await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                    NavigationManager.NavigateTo("ubicacionProductos");
                }
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal");
            }
        }

        private async Task cancel()
        {
            await JsRuntime.InvokeAsync<object>("blazorInterop.CancelSwal");
            NavigationManager.NavigateTo("ubicacionProductos");
        }

    }
