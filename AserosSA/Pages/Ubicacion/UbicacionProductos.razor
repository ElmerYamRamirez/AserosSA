@page "/ubicacionProductos"

@using System.ComponentModel
@using Models
@using AntDesign.TableModels
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject ModalService _modalService
@inject MessageService _message

<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Ubicaciones</h3>
</div>

<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
        <Select DataSource="@_list"
                @bind-Value="@_selectedValue1"
                ValueName="@nameof(Info.Value)"
                LabelName="@nameof(Info.Name)"
                DisabledName="@nameof(Info.IsDisabled)"
                Style="width:120px"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a title="Agregar nuevo almacen" @onclick="AltaUbicacion"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>

<Table @ref="table"
       TItem="UbicacionModel"
       DataSource="@ubicaciones"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id.ToString())" />
    <Column Title="Clave" @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Zona" Sortable />
    <Column @bind-Field="@context.Estante" Sortable />
    <ActionColumn>
        <Space>
            <a title="Editar" @onclick="() => Edit(context.Id)">
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="() => Delete(context)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>

</Table>

<br />
<p>Página: @_pageIndex | Registros: @_pageSize | Total: @_total</p>

@using System.Text.Json;
@code {

    [Inject]
    public NavigationManager NavManager { get; set; }

    List<UbicacionModel> ubicaciones = null;
    List<UbicacionModel> busquedaUbicacion = null;

    IEnumerable<UbicacionModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 4;
    int _total = 0;
    private string txtValue { get; set; }
    List<Info> _list;
    string _selectedValue1;

    protected override async Task OnInitializedAsync()
    {
        ubicaciones = await localStorage.GetItemAsync<List<UbicacionModel>>("Ubicaciones");

        if (ubicaciones == null)
        {
            ubicaciones = new List<UbicacionModel>
            {
                new UbicacionModel{ Id = 1, Zona = "Zon1", Estante = "Est1" },
                new UbicacionModel{ Id = 2, Zona = "Zon2", Estante = "Est2" },
                new UbicacionModel{ Id = 3, Zona = "Zon3", Estante = "Est3" }
            };
        }

        _total = ubicaciones.Count;

        _list = new List<Info> {
              new Info {Value = "Zona", Name = "Zona"},
            new Info {Value = "Estante", Name = "Estante"}
        };
    }

    class Info
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private void OnSelectedItemChangedHandler(Info value)
    {
        Console.WriteLine($"selected: ${value?.Name}");
    }

    public async Task OnChange(QueryModel<UbicacionModel> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private async Task Delete(UbicacionModel item)
    {
        bool borrarUbicacion;
        borrarUbicacion = await JsRuntime.InvokeAsync<bool>("blazorInterop.deleteSwal", item.Zona);
        if (borrarUbicacion)
        {
            ubicaciones.Remove(item);
            _total = ubicaciones.Count;
        }
    }

    private async Task Edit(int id)
    {
        await localStorage.SetItemAsync<List<UbicacionModel>>("Ubicaciones", ubicaciones);
        NavManager.NavigateTo($"editarUbicacion/{id}");
    }

    public async Task AltaUbicacion()
    {
        await localStorage.SetItemAsync<List<UbicacionModel>>("Ubicaciones", ubicaciones);
        NavManager.NavigateTo("altaubicacion");
    }

    private async Task buscar()
    {
        ubicaciones = await localStorage.GetItemAsync<List<UbicacionModel>>("Ubicaciones");

        if (txtValue != null)
        {
            if (_selectedValue1.Equals("Zona"))
            {
                ubicaciones = ubicaciones.FindAll(x => x.Zona.Contains(txtValue));
            }
            else if (_selectedValue1.Equals("Estante"))
            {
                ubicaciones = ubicaciones.FindAll(x => x.Estante.Contains(txtValue));
            }
            else
            {
                await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Selecciona un filtro");
            }
        }
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Bucando...{txtValue}");

    }

}

