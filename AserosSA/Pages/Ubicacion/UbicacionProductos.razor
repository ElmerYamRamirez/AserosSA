@page "/ubicacionProductos"

@inject IJSRuntime JsRuntime
@using System.ComponentModel
@inject NavigationManager NavigationManager
@inject ModalService _modalService
@inject MessageService _message

<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Ubicaciones</h3>
</div>

<div>
    <Row Style="margin-bottom:10px;">
        <Col Span="9" Offset="12">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar ubicación" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a href="/AltaUbicacionProductos" title="Agregar nueva ubicacion"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>


<Table @ref="table"
       TItem="Ubicaciones"
       DataSource="@ubicaciones"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows">

    <Selection Key="@(context.Id.ToString())" />

    <AntDesign.Column @bind-Field="@context.Id" Sortable />
    <AntDesign.Column @bind-Field="@context.Zona" Sortable />
    <AntDesign.Column @bind-Field="@context.Pasillo" Sortable />
    <AntDesign.Column @bind-Field="@context.Estante" Sortable />
    <AntDesign.Column @bind-Field="@context.Nivel" Sortable />

    <ActionColumn>
        <Space>
            <a href="/AltaUbicacionProductos/1" title="Editar">
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="Eliminar">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>

</Table>

<br />
<p>Página: @_pageIndex | Registros: @_pageSize | Total: @_total</p>





@code {

    Ubicaciones[] ubicaciones;

    IEnumerable<Ubicaciones> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 5;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        ubicaciones = await GetForecastAsync(_pageIndex, _pageSize);
        _total = ubicaciones.Length;
    }

    public class Ubicaciones
    {
        [DisplayName("Clave")]
        public int Id { get; set; }

        [DisplayName("Zona")]
        public string Zona { get; set; }

        [DisplayName("Pasillo")]
        public string Pasillo { get; set; }

        [DisplayName("Estante")]
        public string Estante { get; set; }

        [DisplayName("Nivel")]
        public string Nivel { get; set; }

    }
    private static readonly string[] Zonas = new[]
    {
        "1", "2", "3", "4", "5", "6", "7", "8"
    };

    private static readonly string[] Pasillos = new[]
    {
        "A", "B", "C", "D", "E", "F", "G", "H"
    };

    private static readonly string[] Estantes = new[]
    {
        "001", "002", "03", "04", "05"
    };

    private static readonly string[] Niveles = new[]
    {
        "01", "02", "03"
    };

    public Task<Ubicaciones[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, 11).Select(index =>
        {

            return new Ubicaciones
            {
                Id = index,
                Zona = Zonas[rng.Next(Zonas.Length)],
                Pasillo = Pasillos[rng.Next(Pasillos.Length)],
                Estante = Estantes[rng.Next(Estantes.Length)],
                Nivel = Niveles[rng.Next(Niveles.Length)],
            };
        }).ToArray());
    }

    public async Task Eliminar()
    {
        //await JsRuntime.InvokeAsync<string>(identifier: "cancelSwal");
        var isTrue = await _modalService.ConfirmAsync(new ConfirmOptions()
        {
            Title = "Elimar",
            Icon =@<Icon Type="exclamation-circle" Theme="Outline"></Icon>,
            Content = "¿Estas seguro que deseas eliminar esta ubicacion?",
            OkText = "Si",
            CancelText = "Cancelar"
        });

        if (isTrue)
        NavigationManager.NavigateTo("/ubicacionProductos");
    }


    private string txtValue { get; set; }
    private async Task buscar()
    {
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Bucando...{txtValue}");
    }
}

