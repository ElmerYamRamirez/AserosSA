@page "/altafactura"
@page "/editarfactura/{id}"
@using System.Text.Json;
@using Models
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JsRuntime


<div class="rounded w-75 bg-light mx-auto" style="margin:15px; padding: 15px;">
    @if (id == null)
    {
        <h3 class="text-center">Agregar factura</h3>
    }
    else
    {
        <h3 class="text-center">Editar Factura</h3>
    }
    <Divider />
    <Form @ref="_form"
          Layout="FormLayout.Horizontal"
          Model="@factura"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="4"
          WrapperColSpan="14"
          Size="ntSizeLDSType.Small">
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="Clave de referencia" LabelColSpan="24" WrapperColSpan="24">
                    <Input @bind-Value="@context.Id" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Fecha" LabelColSpan="24" WrapperColSpan="24">
                    <DatePicker @bind-Value="@context.FechaFactura" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="Clave proveedor" LabelColSpan="24" WrapperColSpan="24">
                    <Input @bind-Value="@context.NombreProveedor" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Comentarios" LabelColSpan="24" WrapperColSpan="24">
                    <TextArea @bind-Value="@context.Comentarios" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row>
            <Divider Orientation="left" Style="font-weight:bold">Articulos</Divider>
            <Button OnClick="addArticle" Type="primary" Style="margin-bottom:16px">
                Agregar un articulo
            </Button>
            <Table DataSource="listOfData" TItem="DetalleFacturaModel" RowClassName="@(_=>"editable-row")" Bordered TableLayout="fixed" Size=@TableSize.Small>
                <ChildContent Context="data">
                    <Column TData="int" Title="Id">
                        @data.Id
                    </Column>
                    <Column TData="string" Title="Articulo">
                        @data.Articulo.Nombre
                    </Column>
                    <Column TData="double" Title="Precio">
                        @data.Articulo.PrecioUnitario
                    </Column>
                    <Column TData="int" Title="Cantidad">
                        @data.CantidadArticulos
                    </Column>
                    <Column TData="double" Title="Subtotal">
                        @data.Subtotal
                    </Column>
                    <Column TData="double" Title="%IVA">
                        @data.Iva
                    </Column>
                    <Column TData="double" Title="Total con IVA">
                        @data.Total
                    </Column>
                    <ActionColumn Title="Acciones">
                        @if (!editCache[data.Id].edit)
                        {
                            <a @onclick="() => startEdit(data.Id)">Editar</a>
                        }
                        else
                        {
                            <a @onclick="() => saveEdit(data)" class="save">Guardar</a>
                            <Popconfirm Title="Cancelar?"
                                        OnConfirm="() => cancelEdit(data.Id)"
                                        OkText="Si"
                                        CancelText="No">
                                <a>Cancelar</a>
                            </Popconfirm>
                        }
                    </ActionColumn>
                </ChildContent>
            </Table>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <FormItem Label="Forma de pago" LabelColSpan="24" WrapperColSpan="24">
                    <Select DataSource="@formaPago"
                            @bind-Value="@context.FormaPago"
                            ValueName="@nameof(Person.Value)"
                            LabelName="@nameof(Person.Name)"
                            Style="width:120px">
                    </Select>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="8">
                
                <FormItem Label="Subtotal" LabelColSpan="24" WrapperColSpan="24">
                    @context.Subtotal
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="8">
                <FormItem Label="I.V.A" LabelColSpan="24" WrapperColSpan="24">
                    @context.Iva
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="8">
                <FormItem Label="Total" LabelColSpan="24" WrapperColSpan="24">
                    @context.Total
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row>
            <FormItem WrapperColSpan="14" WrapperColOffset="4">
                <Button @onclick="save" HtmlType="submit">
                    Guardar
                </Button>
                <Button @onclick="cancel" HtmlType="submit" Danger>
                    Cancelar
                </Button>
            </FormItem>
        </Row>
    </Form>
</div>
<Modal Title="@_title"
       Visible="@_visible"
       OnOk="() =>saveEdit(detalle)"
       OnCancel="@HandleCancel"
       DestroyOnClose="true">
    <Form @ref="_formArt"
          Model="@detalle"
          LabelCol="new ColLayoutParam { Span = 6 }"
          WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Articulo">
            <Select Mode="default"
                    DataSource="@_articulos"
                    @bind-Value="detalle.Articulo"
                    LabelName="@nameof(articulo.Nombre)"
                    TItem="ArticuloModel"
                    TItemValue="ArticuloModel"
                    EnableSearch
                    OnSelectedItemsChanged="OnSelectedItemsChangedHandler">
                <SelectOptions>
                    @foreach (var item in _articulos)
                    {
                        <SelectOption TItemValue="ArticuloModel" TItem="ArticuloModel" Value=@item Label=@item.Nombre />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Cantidad">
            <Input @bind-Value="detalle.CantidadArticulos" />
        </FormItem>
    </Form>
</Modal>
<style>
    .save {
        margin-right: 8px;
    }
</style>

@code {

    [Parameter]
    public string id { get; set; }

    public bool editar = false;
    private string selectArticulo;
    private FacturaModel factura = new FacturaModel();
    private List<Person> formaPago = new List<Person>{
            new Person {Value = "Efectivo", Name = "Efectivo"},
            new Person {Value = "Credito", Name = "Credito"},
            new Person { Value = "Debito", Name = "Debito" }
        };
    IDictionary<int, (bool edit, DetalleFacturaModel data)> editCache = new Dictionary<int, (bool edit, DetalleFacturaModel data)>();
    DetalleFacturaModel[] listOfData = null;

    int i = 0;
    private ArticuloModel articulo = new ArticuloModel();
    private DetalleFacturaModel detalle = new DetalleFacturaModel();
    private List<ArticuloModel> _articulos = null;
    List<FacturaModel> facturas = null;
    AntDesign.Form<FacturaModel> _form;
    AntDesign.Form<DetalleFacturaModel> _formArt;
    string _title = "Agregar Articulo";
    bool _visible = false;

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(factura)}");
        Console.WriteLine($"Success:{JsonSerializer.Serialize(listOfData)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(factura)}");
    }

    private async Task save()
    {
        if (_form.Validate())
        {
            if (editar == false)
            {
                if (facturas.Exists(x => x.Id == factura.Id))
                {
                    await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal", $"El id {factura.Id} ya existe");
                }
                else if (listOfData == null)
                {
                    await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal", $"Articulos no puede estar vacio");
                }
                else
                {
                    factura.DetalleFactura = listOfData.ToList<DetalleFacturaModel>();
                    facturas.Add(factura);
                    await localStorage.SetItemAsync<List<FacturaModel>>("Facturas", facturas);
                    await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                    NavigationManager.NavigateTo("facturas");
                }
            }
            else
            {
                factura.DetalleFactura = listOfData.ToList<DetalleFacturaModel>();
                //facturas.Add(factura);
                await localStorage.SetItemAsync<List<FacturaModel>>("Facturas", facturas);
                await JsRuntime.InvokeAsync<object>("blazorInterop.saveSwal");
                NavigationManager.NavigateTo("facturas");
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("blazorInterop.errorFormSwal");
        }
    }

    private async Task cancel()
    {
        await JsRuntime.InvokeAsync<object>("blazorInterop.CancelSwal");
        NavigationManager.NavigateTo("facturas");
    }

    void startEdit(int id)
    {
        var data = editCache[id];
        data.edit = true;
        editCache[id] = data;
        detalle = listOfData[id];
        //updateEditCache();
        _visible = true;
    }

    void cancelEdit(int id)
    {
        var data = listOfData.FirstOrDefault(item => item.Id == id);
        editCache[id] = new(false, data);
    }

    void saveEdit(DetalleFacturaModel deta)
    {
        //Console.WriteLine(JsonSerializer.Serialize(deta));
        Console.WriteLine(JsonSerializer.Serialize(i));
        Console.WriteLine(listOfData);
        if (listOfData == null) {
            listOfData = listOfData.Append(deta);
        }
        else{
            //si el editcahe.edit == true
            //if (editCache[deta.Id].edit == true) { 

            //}
            //buscar detalle en listofdata
            //actualizar el detalle
            //if (deta.Id == 0)
            if (editCache[deta.Id].edit == false)
            {
                deta.Id = i;
                listOfData = listOfData.Append(deta);
            }
            //var data = listOfData.FirstOrDefault(item => item.Id == deta.Id);
            //listOfData[data.Id] = deta;
            detalle = new DetalleFacturaModel();
            ///listOfData[detalle.Id] = data;
        }
        //var data = listOfData.FirstOrDefault(item => item.Id == deta.Id);
        //editCache[deta.Id] = new(false, data);
        updateEditCache();
        _visible = false;
    }

    void updateEditCache()
    {
        double total = 0;
        if (listOfData.Length > 0)
        {
            for (i = 0; i < listOfData.Length; i++)
            {
                editCache[listOfData[i].Id] = new(false, listOfData[i]);
                total = total + listOfData[i].Subtotal;
            }

            factura.Subtotal = total;
            factura.Iva = total * 0.16;
            factura.Total = total + (total * 0.16);

        }

        Console.WriteLine(i);

        /*listOfData.ForEach(item =>
        {
            editCache[item.Clave] = new(false, item);
            //if (listOfData.Length.ToString() == item.Clave) {
              //  editCache[item.Clave].edit = true;
            //}
        });*/
    }

    protected override async Task OnInitializedAsync()
    {
        _articulos = await localStorage.GetItemAsync<List<ArticuloModel>>("Articulos");
        facturas = await localStorage.GetItemAsync<List<FacturaModel>>("Facturas");
        //listOfData = Enumerable.Range(0, 100).Select(i => new ItemData { Id = $"{i}", Name = $"Edrward {i}", Age = 32, Address = $"London Park no. {i}" }).ToArray();

        if (id != null)
        {
            factura = facturas.Find(x => x.Id.Equals(id));
            listOfData = factura.DetalleFactura.ToArray<DetalleFacturaModel>();
            updateEditCache();
            editar = true;
        }
    }

    void addArticle()
    {
        //listOfData = listOfData.Append(new DetalleFacturaModel { Id = i, Articulo = new ArticuloModel { PrecioUnitario = 0 } });
        //updateEditCache();
        //detalle = listOfData.Last();
        //detalle = new DetalleFacturaModel();
        _visible = true;
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<ArticuloModel> values)
    {
        Console.WriteLine($"selected: ${string.Join(",", values)}");
    }

    private void HandleOk(MouseEventArgs e, int id)
    {
        var data = listOfData.FirstOrDefault(item => item.Id == id);
        editCache[id] = new(false, data);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }
}
