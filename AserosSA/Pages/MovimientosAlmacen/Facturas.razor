@page "/facturas"
@using System.ComponentModel
@using AntDesign.TableModels
@inject IJSRuntime JsRuntime
@using Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Entradas de almacen</h3>
</div>

<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
            <Select DataSource="@_list"
                    @bind-Value="@_selectedValue1"
                    ValueName="@nameof(Person.Value)"
                    LabelName="@nameof(Person.Name)"
                    DisabledName="@nameof(Person.IsDisabled)"
                    Style="width:120px">
            </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar ubicación" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a href="/altafactura" title="Agregar nueva ubicacion"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>

<Table @ref="table"
       TItem="FacturaModel"
       DataSource="@facturas"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows">
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.FechaFactura" Format="yyyy-MM-dd" Sortable />
    <Column @bind-Field="@context.NombreProveedor"/>
    <Column @bind-Field="@context.Subtotal"/>
    <Column @bind-Field="@context.Iva"/>
    <Column @bind-Field="@context.Total"/>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="()=>Delete(context)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@using System.Text.Json;
@code {
    /// <Mis_variables>
    List<FacturaModel> facturas;
    /// </Mis_variables>

    IEnumerable<FacturaModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 4;
    int _total = 0;

    List<Person> _list;
    string _selectedValue1;

    private string txtValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //me quede en la inicializacion de las facturas
        //facturas = await GetForecastAsync(_pageIndex, _pageSize);

        facturas = await localStorage.GetItemAsync<List<FacturaModel>>("Facturas");
        if (facturas == null)
        {
            facturas = new List<FacturaModel> {
                new FacturaModel{ Id = "FAC-01", FechaFactura = new DateTime(2020,04,30), NombreProveedor = "Tort Olivier & Asociados", Comentarios = "Pedido: 4401", FormaPago ="Efectivo", Subtotal = 120.30 },
                new FacturaModel{ Id = "FAC-02", FechaFactura = new DateTime(2020,04,30), NombreProveedor = "Tort Olivier & Asociados", Comentarios = "Pedido: 4401", FormaPago ="Efectivo", Subtotal = 120.30 },
                new FacturaModel{ Id = "FAC-03", FechaFactura = new DateTime(2020,04,30), NombreProveedor = "Tort Olivier & Asociados", Comentarios = "Pedido: 4401", FormaPago ="Efectivo", Subtotal = 120.30 }
            };
        }

        await localStorage.SetItemAsync<List<FacturaModel>>("Facturas", facturas);

        _total = facturas.Count;

        _list = new List<Person>{
            new Person {Value = "Fecha", Name = "Fecha"},
            new Person {Value = "Artículo", Name = "Artículo"},
            new Person {Value = "Número factura", Name = "Número factura"}
        };
    }

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    public class WeatherForecast
    {
        [DisplayName("Número factura")]
        public int Id { get; set; }

        [DisplayName("Fecha")]
        public DateTime? Date { get; set; }

        public string Articulo { get; set; }

        public int Cantidad { get; set; }

        public double Precio { get; set; }

        public double Total { get; set; }
    }

    private static readonly string[] Articulos = new[]
    {
        "Papel", "Lingotes", "Fierro", "Gas"
    };

    private static readonly int[] Cantidades = new[]
    {
        3, 2, 5, 7
    };

    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new WeatherForecast
            {
                Id = index,
                Date = DateTime.Now.AddDays(index),
                Articulo = Articulos[rng.Next(Articulos.Length)],
                Cantidad = Cantidades[rng.Next(Cantidades.Length)],
                Precio = 30,
                Total = 60

            };
        }).ToArray());
    }


    private async Task Delete(FacturaModel item)
    {
        bool borrarItem;
        borrarItem = await JsRuntime.InvokeAsync<bool>("blazorInterop.deleteSwal", item.Id);
        if (borrarItem)
        {
            facturas.Remove(item);
            await localStorage.SetItemAsync<List<FacturaModel>>("Facturas", facturas);
            _total = facturas.Count;
        }
    }

    private async Task buscar()
    {
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Buscando...{txtValue}");
        //await JsRuntime.InvokeAsync<Object>(identifier: "buscarSwal");
    }
}
