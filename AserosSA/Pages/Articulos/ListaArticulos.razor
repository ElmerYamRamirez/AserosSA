@page "/listaArticulos"

@inject IJSRuntime JsRuntime
@using System.ComponentModel
@using Models
@inject ModalService _modalService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<div class="col-sm-12" style="text-align:left;margin-top:10px;">
    <h3>Articulos</h3>
</div>
<div>
    <Row Style="margin-bottom:10px;" Justify="end">
        <Col Span="3">
        <Select DataSource="@_list"
                @bind-Value="@_selectedValue1"
                ValueName="@nameof(CriteriodeBusqueda.Value)"
                LabelName="@nameof(CriteriodeBusqueda.Name)"
                Style="width:120px"
                OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </Select>
        </Col>
        <Col Span="9">
        <Search EnterButton="true" OnSearch="buscar" @bind-Value="@txtValue" Placeholder="Buscar" />
        </Col>
        <Col Span="3">
        <div style="text-align:right; width:87%;">
            <a @onclick="AltaArticulo" title="Nuevo"><i style="margin-right:5px;">Agregar</i><span class="oi oi-plus"></span></a>
        </div>
        </Col>
    </Row>
</div>


<Table @ref="table"
       TItem="ArticuloModel"
       DataSource="@articulos"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       Size=@TableSize.Small
       @bind-SelectedRows="selectedRows">

    <AntDesign.Column @bind-Field="@context.Id" Sortable />
    <AntDesign.Column @bind-Field="@context.Nombre" Sortable />
    <AntDesign.Column @bind-Field="@context.Descripcion" Sortable />
    <AntDesign.Column @bind-Field="@context.Marca" Sortable />
    <AntDesign.Column @bind-Field="@context.Cantidad" Sortable />
    <AntDesign.Column @bind-Field="@context.PrecioUnitario" Sortable />
    <AntDesign.Column @bind-Field="@context.Minimo" Sortable />
    <AntDesign.Column @bind-Field="@context.Maximo" Sortable />
    <AntDesign.Column @bind-Field="@context.PuntoReorden" Sortable />
    <AntDesign.Column Title="Unidad" TData="string" DataIndex="Unidad.Descripcion" />
    <AntDesign.Column TData="string" DataIndex="Ubicacion.Id" />
    <AntDesign.Column TData="string" DataIndex="Almacen.Id" />

    <ActionColumn>
        <Space>
            <a href="/consultaArticulo/1" title="Ver">
                <span class="oi oi-eye"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Editar" @onclick="()=>Edit(context.Id)">
                <span class="oi oi-pencil"></span>
            </a>
        </Space>
    </ActionColumn>
    <ActionColumn>
        <Space>
            <a title="Eliminar" @onclick="()=>Delete(context)">
                <span class="oi oi-trash"></span>
            </a>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>Página: @_pageIndex | Registros: @_pageSize | Total: @_total</p>





@code {

    IEnumerable<ArticuloModel> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 4;
    int _total = 0;

    List<ArticuloModel> articulos = null;
    List<CriteriodeBusqueda> _list;
    string _selectedValue1;

    class CriteriodeBusqueda
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _list = new List<CriteriodeBusqueda>{
            new CriteriodeBusqueda {Value = "Clave", Name = "Clave"},
            new CriteriodeBusqueda {Value = "Nombre", Name = "Nombre"},
            new CriteriodeBusqueda {Value = "Descripción", Name = "Descripción"},
            new CriteriodeBusqueda {Value = "Marca", Name = "Marca"},
            new CriteriodeBusqueda {Value = "Precio", Name = "Precio"}
        };

        articulos = await localStorage.GetItemAsync<List<ArticuloModel>>("Articulos");

        if (articulos == null) {
            //crear articulos por default
            //articulos = await GetArticulosAsync(_pageIndex, _pageSize);

            articulos = new List<ArticuloModel>
            {
                new ArticuloModel{Id = "ART-01", Nombre = "Hojas blancas", Descripcion="Paquete de hojas blancas t/carta", Marca = "Scribe",
                    Cantidad = 40, PrecioUnitario = 70.00, Minimo = 30, Maximo = 150, PuntoReorden = 50,
                    Unidad = new UnidadModel{Id = "UNI-PRUE-00", Simbolo="Caj", Descripcion = "Caja de Cartón", Estatus = "activo" },
                    Almacen = new AlmacenModel{ Id = "ALM-PRUE-00", Nombre = "Almacen" , Descripcion ="Almacen de prueba", Status ="Activo"},
                    Ubicacion = new UbicacionModel{Id = "UBI-PRUE-00", Estante = 1 , Descripcion = "ubicacion de prueba"}
                }
            };
        }

        _total = articulos.Count;
    }

    private void OnSelectedItemChangedHandler(CriteriodeBusqueda value)
    {
        Console.WriteLine($"selected: ${value?.Name}");
    }

    public Task<ArticuloModel[]> GetArticulosAsync(int pageIndex, int pageSize)
    {
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, 11).Select(index =>
        {
            return new ArticuloModel
            {
                Id = "ART-PRUE-00",
                Nombre = "articulo-1",
                Descripcion = "descripcion",
                Marca = "marca",
                Cantidad = 10,
                PrecioUnitario = 2.5,
                Minimo = 10,
                Maximo = 20,
                PuntoReorden = 15,
                UnidadId = "key-unidad",
                UbicacionId = "key-ubi",
                AlmacenId = "key-almacen"
            };
        }).ToArray());
    }

    public async Task AltaArticulo()
    {
        await localStorage.SetItemAsync<List<ArticuloModel>>("Articulos", articulos);
        NavigationManager.NavigateTo("altaArticulo");
    }

    private async Task Delete(ArticuloModel item)
    {
        bool borrarArticulo;
        borrarArticulo = await JsRuntime.InvokeAsync<bool>("blazorInterop.deleteSwal", item.Nombre);
        if (borrarArticulo)
        {
            articulos.Remove(item);
            await localStorage.SetItemAsync<List<ArticuloModel>>("Articulos", articulos);
            _total = articulos.Count;
        }
    }

    private async Task Edit(string id)
    {
        await localStorage.SetItemAsync<List<ArticuloModel>>("Articulos", articulos);
        NavigationManager.NavigateTo($"editararticulo/{id}");
    }

    private string txtValue { get; set; }
    private async Task buscar()
    {
        articulos = await localStorage.GetItemAsync<List<ArticuloModel>>("Articulos");

        if (txtValue != null)
        {
            switch (_selectedValue1)
            {
                case "Nombre":
                    articulos = articulos.FindAll(x => x.Nombre.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Descripción":
                    articulos = articulos.FindAll(x => x.Descripcion.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Clave":
                    articulos = articulos.FindAll(x => x.Id.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Marca":
                    articulos = articulos.FindAll(x => x.Marca.Contains(txtValue, StringComparison.CurrentCultureIgnoreCase));
                    break;
                case "Precio":
                    articulos = articulos.FindAll(x => x.PrecioUnitario == Int32.Parse(txtValue));
                    break;
                default:
                    await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Selecciona un filtro...");
                    break;
            }
        }
        await JsRuntime.InvokeAsync<object>(identifier: "swal", $"Buscando...{txtValue}");
    }
}

